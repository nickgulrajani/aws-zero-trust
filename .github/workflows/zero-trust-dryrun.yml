name: zero-trust-dryrun

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  dryrun:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform fmt/validate
        run: |
          terraform -chdir=terraform init -backend=false
          terraform -chdir=terraform fmt -recursive
          terraform -chdir=terraform validate

      - name: Terraform plan (dry-run only)
        env:
          AWS_ACCESS_KEY_ID: dummy
          AWS_SECRET_ACCESS_KEY: dummy
          AWS_REGION: us-east-1
        run: |
          set -euo pipefail
          terraform -chdir=terraform init -backend=false
          terraform -chdir=terraform plan -refresh=false \
            -var-file=../tfvars/minimal.tfvars \
            -out=tfplan.binary
          echo "== human-readable plan (first 150 lines) =="
          terraform -chdir=terraform show tfplan.binary | sed -n '1,150p'
          test -f terraform/tfplan.binary && echo "✅ terraform/tfplan.binary exists"

      - name: Convert plan to JSON
        run: |
          set -euo pipefail
          terraform -chdir=terraform show -json tfplan.binary > tfplan.json
          ls -la tfplan.json
          jq '.resource_changes | length' tfplan.json

      - name: Gate — block wide-open SG rules
        run: |
          set -euo pipefail
          BAD=$(
            jq -r '
              [
                .resource_changes[]?
                | select(.type=="aws_security_group") as $rc
                | ($rc.change.after // {}) as $a
                | ($a.ingress // []) as $ing
                | ($a.egress  // []) as $eg
                | {
                    addr: $rc.address,
                    open_ing: ( [ $ing[]? | ((.cidr_blocks // [])[]?), ((.ipv6_cidr_blocks // [])[]?) ]
                                | any(.=="0.0.0.0/0" or .=="::/0") ),
                    open_egr: ( [ $eg[]?  | ((.cidr_blocks // [])[]?), ((.ipv6_cidr_blocks // [])[]?) ]
                                | any(.=="0.0.0.0/0" or .=="::/0") )
                  }
                | select(.open_ing or .open_egr)
                | .addr
              ] | unique | .[]
            ' tfplan.json
          )
          if [ -n "$BAD" ]; then
            echo "::error::Insecure SGs (allow 0.0.0.0/0 or ::/0):"
            echo "$BAD"
            exit 1
          else
            echo "✅ No wide-open security group rules."
          fi

      - name: Gate — bucket policy must enforce aws:SourceVpce
        run: |
          set -euo pipefail
          HAS_VPCE=$(
            jq -r '
              any(
                .resource_changes[]?;
                (.type=="aws_s3_bucket_policy")
                and (
                  (try (.change.after.policy | fromjson) catch {}) as $p
                  | any($p.Statement[]?;
                        (.Condition? // {})
                        | (.StringNotEquals? // {})
                        | (has("aws:SourceVpce") or has("aws:sourceVpce"))
                  )
                )
              )
            ' tfplan.json
          )
          if [ "$HAS_VPCE" != "true" ]; then
            echo "::group::DEBUG: S3 bucket policies in plan"
            jq -r '.resource_changes[]? | select(.type=="aws_s3_bucket_policy") | .change.after.policy' tfplan.json
            echo "::endgroup::"
            echo "::error::S3 bucket policy missing Condition.StringNotEquals[\"aws:SourceVpce\"]"
            exit 1
          else
            echo "✅ S3 bucket policy enforces aws:SourceVpce."
          fi

      - name: Generate plan summary (Markdown)
        run: |
          set -euo pipefail
          ADDS=$(jq '[.resource_changes[]? | select(.change.actions|index("create"))] | length' tfplan.json)
          TOP=$(jq -r '
            [.resource_changes[]? | select(.change.actions|index("create")) | .type]
            | group_by(.) | map({type: .[0], count: length})
            | sort_by(-.count) | (["Type","Creates"] as $h | $h), (.[] | [.type, (.count|tostring)])
            | @tsv' tfplan.json | column -t)
          {
            echo "# Zero Trust Plan Summary"
            echo
            echo "**Adds:** ${ADDS}"
            echo
            echo "## Created Resource Types"
            echo '```text'
            echo "$TOP"
            echo '```'
            echo
            echo "## Gates"
            echo "- ✅ No wide-open SG rules"
            echo "- ✅ S3 bucket policy enforces aws:SourceVpce"
          } > plan-summary.md
          sed -n '1,80p' plan-summary.md
          {
            echo "### Zero Trust Plan Summary"
            echo
            echo "- Adds: **${ADDS}**"
            echo
            echo "_See artifacts for full plan & checks._"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zero-trust-artifacts
          path: |
            terraform/tfplan.binary
            tfplan.json
            plan-summary.md
          if-no-files-found: error
